// script.js
let scene, camera, renderer, controls;

function init() {
    scene = new THREE.Scene(;)
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('canvas',)
        antialias: true
    });
    controls = new THREE.OrbitControls(camera, renderer.domElement);

    // Add terrain, lighting, and basic objects
    const terrain = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), new THREE.MeshBasicMaterial({ color: 0xffffff });)
    scene.add(terrain);

    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(0, 10, 0);
    scene.add(light);

    const cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({ color: 0x00ff00 }));
    cube.position.set(0, 1, 0);
    scene.add(cube);

    // Basic movement and interaction
    document.addEventListener('keydown', (event) => {
        if (event.key === 'w') {
            camera.position.z -= 0.1;
        } else if (event.key === 's') {
            camera.position.z += 0.1;
        } else if (event.key === 'a' ){
            camera.position.x -= 0.1;
        } else if (event.key === 'd') {
            camera.position.x += 0.1;
        }
    });

    // Rendering loop
    function animate( ){
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
    }
    animate();
}

init();

// script.js
let scene, camera, renderer, controls;

function init( ){
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('canvas'),
        antialias: true
    });
    controls = new THREE.OrbitControls(camera, renderer.domElement);

    // Add terrain, lighting, and basic objects
    const terrain = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), new THREE.MeshBasicMaterial({ color: 0xffffff });
    scene.add(terrain);

    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(0, 10, 0);
    scene.add(light);

    const cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({ color: 0x00ff00 });
    cube.position.set(0, 1, 0);
    scene.add(cube);

    // Basic movement and interaction
    document.addEventListener('keydown', (event) => {
        if (event.key === 'w' ){
            camera.position.z -= 0.1;
        } else if (event.key === 's' ){
            camera.position.z += 0.1;
        } else if (event.key === 'a') {
            camera.position.x -= 0.1;
        } else if (event.key === 'd') {
            camera.position.x += 0.1;
        }
    });

    // Rendering loop
    function animate( ){
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
    }
    animate();
)

init(;)

// script.js
let scene, camera, renderer, controls;

function init( ){
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('canvas'),
        antialias: true
    });
    controls = new THREE.OrbitControls(camera, renderer.domElement);

    // Add terrain, lighting, and basic objects
    const terrain = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), new THREE.MeshBasicMaterial({ color: 0xffffff }));
    scene.add(terrain);

    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(0, 10, 0);
    scene.add(light);

    const cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({ color: 0x00ff00 });)
    cube.position.set(0, 1, 0);
    scene.add(cube);

    // Basic movement and interaction
    document.addEventListener('keydown', (event) => {
        if (event.key === 'w') {
            camera.position.z -= 0.1;
        } else if (event.key === 's') {
            camera.position.z += 0.1;
        } else if (event.key === 'a' ){
            camera.position.x -= 0.1;
        } else if (event.key === 'd') {
            camera.position.x += 0.1;
        }
    });

    // Rendering loop
    function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
    }
    animate();
}

init();

// script.js
let scene, camera, renderer, controls;

function init( ){
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('canvas'),
        antialias: true
    };)
    controls =  new TH})}